#include <DebugAdapter.h>
#pragma inline_asm( DA_Poll )
#pragma inline_asm( DA_GetChannelStatus )
#pragma inline_asm( DA_GetData )

Sint32 DA_Poll( Uint32 *p_pStatus )
{
	add		#-4, r15
	mov.l	r4, r5
	mov.b	#0, r0
	mov.b	r0, @r5
	mov.b	r0, @( 1, r5 )
	mov.b	r0, @( 2, r5 )
	mov.b	r0,	@( 3, r5 )
	mov.l	#H'900,	r4
	trapa	#02
	mov		r5, r4
	add		#4, r15
	; R0 is already set
}

Sint32 DA_GetChannelStatus( Uint32 p_Channel, Uint8 *p_pStatus )
{
	add		#-H'C, r15
	mov.l	r4, @( 4, r15 ) ; Store the channel for the end of the function
	mov.l	r5, @( 8, r15 ) ; Store the status pointer
	mov.l	r15, r5 ; Use a local variable for the loc parameter
	mov.l	#0, r0
	mov.l	r0, @r5
	mov.l	#H'900, r4
	trapa	#02
	mov.l	@( 8, r15 ), r6 ; Restore the status pointer
	mov.l	r0, r7			; Store the return value
	mov.l	@( 4, r15 ), r0
	tst		#0, r0 ; Channel 0
	bf		Check2
	mov.b	@r5, r0
	bra		ChannelStatReturn
	nop
Check2:
	tst		#1, r0 ; Channel 1
	bf		Check3
	mov.b	@( 1, r5 ), r0
	bra		ChannelStatReturn
	nop
Check3:
	tst		#2, r0 ; Channel 2
	bf		Check4
	mov.b	@( 2, r5 ), r0
	bra		ChannelStatReturn
	nop
Check4:
	mov.b	@( 3, r5 ), r0	; Channel 3 (if any value other than 0-3 is used
							; for the channel number, channel 3 is always
							; returned )
ChannelStatReturn:
	mov.b	r0, @r6			; Set the status to the byte stored in r0
	mov.l	r7, r0			; Restore r0
	add		#H'C, r15
}

Sint32 DA_GetData( void *p_pData, int p_Size, int p_Channel,
	Sint32 *p_pBytesRead )
{
	add		#-H'C, r15
	mov.l	r4, @( 4, r15 ) ; Store the parameters (r5 and r7 won't change)
	mov.l	r6, @( r15 )
	mov.l	r6, r4				; Get p_Channel out (stored from R6)
	mov.l	#H'A08, r6			; Set the address to use (0xA08 + channel)
	add		r6, r4				; Add 0xA08
	mov.l	@( 4, r15 ), r6		; Destination address
	trapa	#02
	nop
GetDataReturn:
	add		#H'C, r15
}

